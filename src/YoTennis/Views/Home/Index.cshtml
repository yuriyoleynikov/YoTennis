@model ContainerForMatchModel
@using YoTennis.Helpers;

@{
    ViewData["Title"] = "Home Page";
}

<p>@Html.ActionLink("Create Match", "Create", "Match")</p>

<div class="game-commands">
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Players
                        @if (Model.Sort != Sort.PlayerNameDescending)
                        {
                            @Html.ActionLink("↓", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.PlayerNameDescending
                       })
                        }
                        else
                        {
                            <b>↓</b>
                        }

                        @if (Model.Sort != Sort.PlayerNameAscending)
                        {
                            @Html.ActionLink("↑", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.PlayerNameAscending
                       })
                        }
                        else
                        {
                            <b>↑</b>
                        }
                    </th>
                    <th>
                        Date @if (Model.Sort != Sort.DateDescending)
                        {
                            @Html.ActionLink("↓", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.DateDescending
                       })
                        }
                        else
                        {
                            <b>↓</b>
                        }

                        @if (Model.Sort != Sort.DateAscending)
                        {
                            @Html.ActionLink("↑", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.DateAscending
                       })
                        }
                        else
                        {
                            <b>↑</b>
                        }
                    </th>
                    <th>
                        State @if (Model.Sort != Sort.StateDescending)
                        {
                            @Html.ActionLink("↓", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.StateDescending
                       })
                        }
                        else
                        {
                            <b>↓</b>
                        }

                        @if (Model.Sort != Sort.StateAscending)
                        {
                            @Html.ActionLink("↑", "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = Model.Skip,
                           player = Model.SelectedPlayers,
                           state = Model.SelectedState,
                           sort = Sort.StateAscending
                       })
                        }
                        else
                        {
                            <b>↑</b>
                        }
                    </th>
                    <th>
                        Score
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach (var match in Model.ListMatchModelView)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelMatch => match.Players)
                        </td>
                        <td>
                            @Html.DisplayFor(modelMatch => match.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelMatch => match.Status)
                        </td>
                        <td>
                            @Html.DisplayFor(modelMatch => match.Score)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Index", "Match", new { id = match.Id }) |
                            @Html.ActionLink("Details", "Details", new { id = match.Id }) |
                            @Html.ActionLink("Stats", "Stats", "Match", new { id = match.Id }) |
                            @Html.ActionLink("Delete", "Delete", "Home", new
                       {
                           id = match.Id,
                           returnUrl = Url.Action("Index", "Home",
                           new
                           {
                               count = Model.Count,
                               skip = Model.Skip,
                               player = Model.SelectedPlayers,
                               state = Model.SelectedState,
                               sort = Model.Sort
                           })
                       }) 
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="my-margin-left">
        <p>Filter</p>

        @if (Model.SelectedPlayers.Any() || Model.SelectedState.Any())
        {
            <p>@Html.ActionLink("Clear", "Index", "Home", new { count = Model.Count, skip = 0 })</p>
        }

        <p>Players:</p>
        <ul>
            @foreach (var player in Model.FilterPayers)
            {
                if (!Model.SelectedPlayers.Any() && !Model.SelectedState.Any())
                {
                    <li>@Html.ActionLink(player, "Index", "Home", new
                   {
                       count = Model.Count,
                       skip = 0,
                       player = Model.SelectedPlayers.WithElement(player),
                       sort = Model.Sort
                   })</li>
                }
                else
                {
                    if (Model.SelectedPlayers.Contains(player))
                    {
                        <li>@player (@Html.ActionLink("Remove", "Index", "Home", new
                                {
                                    count = Model.Count,
                                    skip = 0,
                                    player = Model.SelectedPlayers.WithoutElement(player),
                                    state = Model.SelectedState,
                                    sort = Model.Sort
                                }))</li>
                    }
                    else
                    {
                        <li>
                            @Html.ActionLink(player, "Index", "Home", new
                       {
                           count = Model.Count,
                           skip = 0,
                           player = player,
                           sort = Model.Sort
                       })
                            (@Html.ActionLink("Add", "Index", "Home", new
                        {
                            count = Model.Count,
                            skip = 0,
                            player = Model.SelectedPlayers.WithElement(player),
                            state = Model.SelectedState,
                            sort = Model.Sort
                        }))
                        </li>
                    }
                }
            }
        </ul>
        <p>Current Status:</p>
        <ul>
            @foreach (var state in Model.FilterState)
            {
                if (!Model.SelectedPlayers.Any() && !Model.SelectedState.Any())
                {
                    <li>
                        @Html.ActionLink(state.ToString(), "Index", "Home",
                            new
                            {
                                count = Model.Count,
                                skip = 0,
                                player = Model.SelectedPlayers,
                                state = Model.SelectedState.WithElement(state),
                                sort = Model.Sort
                            })
                    </li>
                }
                else
                {
                    if (Model.SelectedState.Contains(state))
                    {
                        <li>
                            @state.ToString()
                            (@Html.ActionLink("Remove", "Index", "Home",
                           new
                           {
                               count = Model.Count,
                               skip = 0,
                               player = Model.SelectedPlayers,
                               sort = Model.Sort
                           }))
                        </li>
                    }
                    else
                    {
                        if (Model.SelectedPlayers.Any())
                        {
                            <li>
                                @Html.ActionLink(state.ToString(), "Index", "Home",
                            new { count = Model.Count, skip = 0, state = state,
                                sort = Model.Sort
                            })
                                (@Html.ActionLink("Add", "Index", "Home",
                                new { count = Model.Count, skip = 0, player = Model.SelectedPlayers, state = state,
                                    sort = Model.Sort
                                }))
                            </li>
                        }
                        else
                        {
                            <li>
                                @Html.ActionLink(state.ToString(), "Index", "Home",
                                new { count = Model.Count, skip = 0, player = Model.SelectedPlayers, state = state,
                                    sort = Model.Sort
                                })
                            </li>
                        }
                    }
                }
            }
        </ul>
        <p>Beginning with:</p>
        <p>Finishing before:</p>
    </div>

</div>
<div>
    <p>
        Show -
        @Html.ActionLink("10", "Index", "Home", new {
       count = 10,
       skip = 0,
       player = Model.SelectedPlayers,
       state = Model.SelectedState,
       sort = Model.Sort
   }) |
        @Html.ActionLink("20", "Index", "Home", new {
       count = 20,
       skip = 0,
       player = Model.SelectedPlayers,
       state = Model.SelectedState,
       sort = Model.Sort
   }) |
        @Html.ActionLink("All", "Index", "Home", new
   {
       count = Model.TotalCount != 0 ? Model.TotalCount : 10,
       skip = 0,
       player = Model.SelectedPlayers,
       state = Model.SelectedState,
       sort = Model.Sort
   })
    </p>

    @if (Model.Count != Model.TotalCount)
    {
        <p>
            Page
            @if (Model.Skip != 0)
                {
                @Html.ActionLink("<", "Index", "Home", new
           {
               count = Model.Count,
               skip = Model.Skip - Model.Count,
               player = Model.SelectedPlayers,
               state = Model.SelectedState,
               sort = Model.Sort
           })
            }
            @{
                int currentPage = Model.Skip == 0 ? 1 : Model.Skip / Model.Count + 1;
            }
            @currentPage
            @if (Model.Skip + Model.Count < Model.TotalCount)
                {
                @Html.ActionLink(">", "Index", "Home", new
           {
               count = Model.Count,
               skip = Model.Skip + Model.Count,
               player = Model.SelectedPlayers,
               state = Model.SelectedState,
               sort = Model.Sort
           })
            }
        </p>
                }
    <p>@Model.TotalCount Matches in system</p>
</div>
